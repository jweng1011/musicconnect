{"version":3,"sources":["features/events/eventsReducer/event.interface.ts","features/app.types.ts","features/users/usersReducer/user.actions.ts","features/events/createEventModal/CreateEventModal.tsx","features/events/eventsReducer/event.actions.ts","ui-components/navBar/NavBar.tsx","features/events/eventListing/EventListingCard.tsx","features/users/usersReducer/user.selector.ts","features/events/eventsReducer/event.selector.ts","features/events/eventListing/EventListingModal.tsx","features/applications/applicationsReducer/application.interface.ts","features/applications/applicationsReducer/application.actions.ts","features/applications/applyEventModal/ApplyEventModal.tsx","pages/Events.tsx","pages/RegisterUser.tsx","features/applications/applicantContent/ApplicantContent.tsx","features/applications/applicationsReducer/application.selector.ts","features/applications/applicantsModal/ApplicantsModal.tsx","features/events/listingCard/ListingCard.tsx","pages/Listings.tsx","pages/SignIn.tsx","App.tsx","reportWebVitals.ts","features/events/eventsReducer/event.reducer.ts","features/users/usersReducer/user.reducer.ts","features/applications/applicationsReducer/application.reducer.ts","store.ts","index.tsx"],"names":["AccessibilityTypes","MusicGenreType","YearsExperienceType","EventType","ADD_EVENT","ADD_APP_TO_EVENT","loginUser","currUser","type","payload","Title","Typography","TextArea","Input","RangePicker","DatePicker","Option","Select","idGenerator","CreateEventModal","onCancel","useState","eventName","setEventName","eventDescription","setEventDescription","location","setLocation","moment","startDate","setStartDate","endDate","setEndDate","audienceSize","setAudienceSize","accessibility","setAccessibility","musicGenre","setMusicGenre","requiredMark","setRequiredMarkType","dispatch","useDispatch","appIds","accessibilityOptions","Object","keys","map","key","visible","onOk","Error","newId","newEvent","id","toString","addEvent","level","layout","onValuesChange","initialValues","Item","label","name","rules","required","message","placeholder","onChange","e","target","value","showTime","dateRange","defaultValue","max","min","onAfterChange","mode","options","Group","checkedValue","console","log","values","x","NavBar","isCreateEventVisible","setIsCreateEventVisible","createEventModal","history","useHistory","className","to","onClick","push","EventListingCard","event","showApplyModal","accessSettings","format","color","selectUsersState","state","users","selectUser","userId","selectUsers","selectCurrUserId","user","selectEvents","events","selectEventsState","selectEvent","eventId","EventListingModal","closeModal","useSelector","footer","Status","changeAppStatus","newStatus","appId","ApplyEventModal","performName","setPerformName","performDescription","setPerformDescription","currUserId","newApplication","status","pending","newAppId","addApplicationToEvent","firstName","lastName","email","Events","isEventModalVisible","setEventModalVisible","isApplyEventModalVisible","setApplyEventModalVisible","currEvent","setCurrEvent","handleOnClickEvent","handleShowApplyModal","eventsCardList","length","description","eventModal","applyModal","RegisterUser","setFirstName","setLastName","setEmail","password","setPassword","eventIds","Password","size","newUser","addUser","orientation","ApplicantContent","onStatusChangeRequest","application","applications","selectApplicationState","selectApplications","selectApplication","StatusTag","accepted","rejected","handleStatusChangeRequest","ApplicantsModal","statusChange","setStatusChange","confirmVisible","setConfirmVisible","currAppId","setCurrAppId","handleOnStatusChangeRequest","ApplicantConfirm","ListingCard","ApplicantsModalVisibility","setApplicantsModalVisibility","applicantsModal","Listings","SignIn","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isLoggedIn","rootReducer","combineReducers","action","updatedAppIds","updatedEvents","updatedUser","newApp","updatedApp","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bb138c4.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport interface Event {\n    id: string;\n    appIds: string[];\n    eventName: string;\n    eventDescription: string;\n    location: string;\n    startDate: moment.Moment;\n    endDate: moment.Moment;\n    audienceSize: number;\n    accessibility?: string[];\n    musicGenre?: string[];\n    yearsOfExperience?: YearsExperienceType;\n}\n\n// export type AccessibilityTypes = \"Handicap\" | \"Hearing\";\nexport enum AccessibilityTypes {\n    Handicap = \"HANDICAP\",\n    Hearing = \"HEARING\",\n}\n\nexport enum MusicGenreType {\n    EDM = \"EDM\",\n    Rock = \"ROCK\",\n    Jazz = \"JAZZ\",\n    Dubstep = \"DUBSTEP\",\n    RnB = \"RNB\",\n    Electro = \"ELECTRO\",\n    Country = \"COUNTRY\",\n    IndieRock = \"INDIEROCK\",\n    Pop = \"POP\",\n}\n\nexport enum YearsExperienceType {\n    Novice,\n    Experienced,\n    Advanced\n}\n\nexport enum EventType {\n    Casual,\n    Formal\n}","import {Event} from \"./events/eventsReducer/event.interface\"\nimport {User} from \"./users/usersReducer/user.interface\"\nimport {Application, Status} from \"./applications/applicationsReducer/application.interface\";\n\nexport const ADD_EVENT = \"ADD_EVENT\";\nexport const ADD_USER = \"ADD_USER\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const ADD_APPLICATION = \"ADD_APPLICATION\";\nexport const ADD_EVENT_TO_USER = \"ADD_EVENT_TO_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const ADD_APP_TO_EVENT = \"ADD_APP_TO_EVENT\";\nexport const CHANGE_APP_STATUS = \"CHANGE_APP_STATUS\";\n\nexport interface AddEventAction {\n    type: typeof ADD_EVENT;\n    payload: Event;\n}\n\nexport interface AddUserAction {\n    type: typeof ADD_USER;\n    payload: User;\n}\n\nexport interface LoginUserAction {\n    type: typeof LOGIN_USER;\n    payload: string;\n}\n\nexport interface AddEventToUserAction {\n    type: typeof ADD_EVENT_TO_USER;\n    payload: string;\n}\n\nexport interface AddApplicationAction {\n    type: typeof ADD_APPLICATION;\n    payload: Application;\n}\n\nexport interface LogoutUserAction {\n    type: typeof LOGOUT_USER;\n    payload: string;\n}\n\nexport interface AddAppToEventAction {\n    type: typeof ADD_APP_TO_EVENT;\n    payload: [string, string];\n}\n\nexport interface ChangeAppStatus {\n    type: typeof CHANGE_APP_STATUS;\n    payload: [Status, string];\n}\n\nexport type AppActionTypes = AddEventAction |\n    AddUserAction |\n    AddApplicationAction |\n    LoginUserAction |\n    AddEventToUserAction |\n    LogoutUserAction |\n    AddAppToEventAction |\n    ChangeAppStatus;","import {ADD_EVENT_TO_USER, ADD_USER, AppActionTypes, LOGIN_USER, LOGOUT_USER} from \"../../app.types\";\nimport {User} from \"../usersReducer/user.interface\"\n\nexport function addUser(newUser: User): AppActionTypes {\n    return {\n        type: ADD_USER,\n        payload: newUser,\n    }\n}\n\nexport function loginUser(currUser: string): AppActionTypes {\n    return {\n        type: LOGIN_USER,\n        payload: currUser,\n    }\n}\n\nexport function addEventToUser(eventId: string): AppActionTypes {\n    return {\n        type: ADD_EVENT_TO_USER,\n        payload: eventId,\n    }\n}\n\nexport function logoutUser(currUser: string) : AppActionTypes {\n    return {\n        type: LOGOUT_USER,\n        payload: currUser,\n    }\n}","import {Input, Modal, Typography, Form, DatePicker, Slider, Button, Checkbox, Select} from \"antd\";\nimport {useState} from \"react\";\nimport moment from \"moment\";\nimport {AccessibilityTypes, EventType, MusicGenreType} from \"../eventsReducer/event.interface\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Event} from \"../eventsReducer/event.interface\"\nimport {addEvent} from \"../eventsReducer/event.actions\";\nimport {RangeValue} from \"rc-picker/lib/interface\";\nimport {addEventToUser} from \"../../users/usersReducer/user.actions\";\n\nconst {Title} = Typography;\nconst {TextArea} = Input;\nconst {RangePicker} = DatePicker;\nconst {Option} = Select;\n\ninterface Props {\n    onCancel: () => void;\n}\n\nlet idGenerator = 0;\n\n//visible state\nexport function CreateEventModal({onCancel}: Props) {\n    const [eventName, setEventName] = useState(\"\");\n    const [eventDescription, setEventDescription] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n\n    // what if time is unknown, or tbd?\n    const [startDate, setStartDate] = useState<moment.Moment | null>(moment());\n    const [endDate, setEndDate] = useState<moment.Moment | null>(moment());\n\n    // whats the difference between event space and audience size?\n    const [audienceSize, setAudienceSize] = useState<number>(1);\n    const [accessibility, setAccessibility] = useState<string[]>([]);\n\n    const [musicGenre, setMusicGenre] = useState<string[]>([]);\n\n    const [requiredMark, setRequiredMarkType] = useState<boolean>();\n    const onRequiredTypeChange = (requiredMark: boolean) => {\n        setRequiredMarkType(requiredMark);\n    }\n\n    const dispatch = useDispatch();\n\n    const onAudienceChange = (value: any) => {\n        setAudienceSize(value);\n    }\n\n    const appIds: string[] = [];\n    const handleOnOk = () => {\n        // add error checking\n        if (startDate === null || endDate === null) {\n            throw new Error(\n                \"Didn't disable ok button when either `start` or `end` is null!\"\n            )\n        }\n        let newId = idGenerator++;\n        const newEvent: Event = {\n            id: newId.toString(),\n            appIds,\n            eventName,\n            eventDescription,\n            location,\n            startDate,\n            endDate,\n            musicGenre,\n            audienceSize,\n            accessibility,\n        };\n        dispatch(addEvent(newEvent));\n        dispatch(addEventToUser(newId.toString()));\n        onCancel();\n    }\n\n    const accessibilityOptions = Object.keys(AccessibilityTypes).map(key => {\n        return key;\n    })\n\n    return (\n        <Modal visible={true} onCancel={onCancel} onOk={handleOnOk}>\n            <Title level={3}>Create An Event</Title>\n            <Form layout=\"vertical\"\n                  requiredMark={requiredMark}\n                  onValuesChange={onRequiredTypeChange}\n                  initialValues={{requiredMark}}\n            >\n                <Form.Item label=\"Event Name\"\n                           name=\"eventName\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter an event name\",\n                           }]}\n                >\n                    <Input placeholder=\"Enter event name\" onChange={(e) => {\n                        setEventName(e.target.value)\n                    }}/>\n                </Form.Item>\n                <Form.Item label=\"Event Description\"\n                           name=\"eventDescription\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter an event description\",\n                           }]}\n                >\n                    <TextArea placeholder=\"Enter event description\" onChange={(e) => {\n                        setEventDescription(e.target.value)\n                    }}/>\n                </Form.Item>\n                <Form.Item label=\"Location\"\n                           name=\"location\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter the event location\",\n                           }]}\n                >\n                    <Input placeholder=\"Enter event location\" onChange={(e) => {\n                        setLocation(e.target.value)\n                    }}/>\n                </Form.Item>\n                <Form.Item label=\"Date & Time\"\n                           name=\"date\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter the event's date\",\n                           }]}\n                >\n                    <RangePicker showTime onChange={(dateRange: RangeValue<moment.Moment>) => {\n                        if (dateRange === null) {\n                            return;\n                        }\n                        setStartDate(dateRange[0]);\n                        setEndDate(dateRange[1])\n                    }}/>\n                </Form.Item>\n                <Form.Item label=\"Audience Size\"\n                           name=\"audienceSize\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter an estimated audience size\",\n                           }]}\n                >\n                    <Slider defaultValue={audienceSize} max={500} min={1} onAfterChange={onAudienceChange}/>\n                </Form.Item>\n                <Form.Item label=\"Music Genre(s)\"\n                           name=\"musicGenre\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter preferred music genres\",\n                           }]}\n                >\n                    <Select mode=\"multiple\" value={musicGenre}\n                            onChange={\n                                (value, options) => {\n                                    setMusicGenre(value);\n                                }}>\n                        {Object.keys(MusicGenreType).map(key => (<Option value={key}>{key}</Option>))}\n                    </Select>\n                </Form.Item>\n                <Form.Item label=\"Accessibility\"\n                           name=\"accessibility\">\n                    <Checkbox.Group value={accessibility} options={accessibilityOptions}\n                        onChange={(checkedValue) => {\n                            console.log(Object.values(checkedValue).map((x) => x.toString()))\n                            setAccessibility(Object.values(checkedValue).map((x) => x.toString()));\n                        }}\n                    />\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}","import {ADD_APP_TO_EVENT, ADD_EVENT, AppActionTypes} from \"../../app.types\";\nimport {Event} from \"./event.interface\"\n\nexport function addEvent(newEvent: Event): AppActionTypes {\n    return {\n        type: ADD_EVENT,\n        payload: newEvent,\n    };\n}\n\nexport function addApplicationToEvent(newAppId: string, eventId: string): AppActionTypes {\n    return {\n        type: ADD_APP_TO_EVENT,\n        payload: [newAppId, eventId]\n    }\n}","import {Link, useHistory} from \"react-router-dom\";\nimport {Button} from \"antd\";\nimport {useState} from \"react\";\nimport {CreateEventModal} from \"../../features/events/createEventModal/CreateEventModal\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutUser} from \"../../features/users/usersReducer/user.actions\";\n\nexport function NavBar() {\n    const [isCreateEventVisible, setIsCreateEventVisible] = useState(false);\n\n    const closeModal = () => setIsCreateEventVisible(false);\n    const createEventModal = <CreateEventModal onCancel={closeModal} />\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const handleSignOut = () => {\n        dispatch(logoutUser(\"\"));\n        history.push(`\\login`);\n    }\n    return (\n        <>\n            {isCreateEventVisible ? createEventModal : null}\n            <div className={`bg-gray-50 shadow-md`}>\n                <div className={`max-w-3xl m-auto py-7 flex justify-between items-center`}>\n                    <div className={`space-x-20`}>\n                        <Link className={`text-gray-900 text-base`} to=\"/events\">Events</Link>\n                        <Link className={`text-gray-900 text-base`} to=\"/applications\">Applications</Link>\n                        <Link className={`text-gray-900 text-base`} to=\"/listings\">Listings</Link>\n                    </div>\n                    <div>\n                        <Button type=\"primary\" onClick={() => setIsCreateEventVisible(true)}>Create Event</Button>\n                        <Button type=\"link\" onClick={handleSignOut}>Sign out</Button>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","import {Button, Card, Tag} from \"antd\";\nimport {Event} from \"../eventsReducer/event.interface\"\nimport {Typography} from \"antd\";\nimport {useState} from \"react\";\nimport {ApplyEventModal} from \"../../applications/applyEventModal/ApplyEventModal\";\n\nconst {Title} = Typography;\n\ninterface Props {\n    onClick: () => void;\n    event: Event\n    showApplyModal: () => void;\n}\nexport function EventListingCard({onClick, event, showApplyModal}: Props) {\n    const {id, eventName, musicGenre, audienceSize, startDate, endDate, accessibility} = event;\n\n    if (musicGenre) {\n        console.log(musicGenre.map((x) => x))\n    }\n\n    let accessSettings: string[] = [];\n    if (accessibility) {\n        accessSettings = accessibility.map((x) => x);\n    }\n\n    return (\n        <>\n            <div className={`hover:shadow-lg border border-gray-200 rounded-md p-5`} onClick={onClick}>\n                <div className={`flex justify-between`}>\n                    <div className={`space-y-4`}>\n                        <div className={`space-y-1`}>\n                            <p className={`text-gray-600 m-0`}>{startDate.format('MMMM D, yyyy') + \" at \" + startDate.format('h:mm A')}</p>\n                            {/*<p>{endDate.format('MM/DD/YYYY HH:mm')}</p>*/}\n                            <p className={`text-lg font-bold`}>{eventName}</p>\n                        </div>\n                        <div className={`space-y-2`}>\n                            <p className={`text-gray-700 m-0`}>Genre(s): {musicGenre ? musicGenre.map((x) => <Tag>{x}</Tag>) : null}</p>\n                            <p className={`text-gray-700`}>Audience Size: {audienceSize}</p>\n                            {Object.values(accessSettings).map((x) => (\n                                <Tag color=\"purple\">{x}</Tag>\n                            ))}\n                        </div>\n                    </div>\n                    <div>\n                        <Button type=\"link\" onClick={showApplyModal}>Apply</Button>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","import {RootState} from \"../../../store\";\n\nexport const selectUsersState = (state: RootState) => state.users;\nexport const selectUsers = (state: RootState) => selectUsersState(state).users;\nexport const selectUser = (userId: string) => {\n    return (state: RootState) => selectUsers(state)[userId]\n}\nexport const selectCurrUserId = (state: RootState) => selectUsersState(state).user;","import {RootState} from \"../../../store\"\nimport {selectCurrUserId, selectUser} from \"../../users/usersReducer/user.selector\";\n\nexport const selectEventsState = (state: RootState) => state.events\n\nexport const selectEvents = (state: RootState) => selectEventsState(state).events;\n\nexport const selectEvent = (eventId: string) => {\n    return (state: RootState) => selectEvents(state)[eventId];\n}\n\nexport const selectEventsByUser = (userId: string) => {\n    return (state: RootState) => selectUser(userId)(state).eventIds.map(\n            id => selectEvent(id)(state))\n    // error check for if the event doesn't exist\n}","import {Button, Modal, Tag, Typography} from \"antd\";\nimport {Event} from \"../eventsReducer/event.interface\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectEvent} from \"../eventsReducer/event.selector\";\nimport {NavBar} from \"../../../ui-components/navBar/NavBar\";\nimport React, {useState} from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\n\nconst {Title} = Typography;\n\ninterface Props {\n    eventId: string;\n    closeModal: () => void;\n    showApplyModal: () => void;\n}\n\nexport function EventListingModal({eventId, closeModal, showApplyModal} : Props) {\n    const event = useSelector(selectEvent(eventId));\n\n    if (!event) {\n        return <Title>Event not found!</Title>\n    }\n\n    const {eventName, eventDescription, musicGenre, audienceSize, startDate, endDate, accessibility} = event;\n\n    let accessSettings: string[] = [];\n    if (accessibility) {\n        accessSettings = accessibility.map((x) => x);\n    }\n\n    return (\n            <Modal visible={true}\n                   onOk={closeModal}\n                   onCancel={closeModal}\n                   footer={[\n                       <Button key=\"cancel\" onClick={closeModal}>\n                           Close\n                       </Button>,\n                       <Button key=\"submit\" type=\"primary\" onClick={showApplyModal}>\n                           Apply\n                       </Button>,\n                   ]}\n            >\n                <div className={`space-y-3`}>\n                    <p className={`text-gray-600 m-0`}>{startDate.format('MMMM D, yyyy') + \" at \" + startDate.format('h:mm A')}</p>\n                    {/*<p>{endDate.format('MM/DD/YYYY HH:mm')}</p>*/}\n                    <p className={`text-lg font-bold m-0`}>{eventName}</p>\n                    <p className={`m-0`}>{eventDescription}</p>\n                    <div className={`space-y-2`}>\n                        <p className={`text-gray-700 m-0`}>Genre(s): {musicGenre ? musicGenre.map((x) =>\n                            <Tag>{x}</Tag>) : null}</p>\n                        <p>Audience Size: {audienceSize}</p>\n                        {Object.values(accessSettings).map((x) => (\n                            <Tag color=\"purple\">{x}</Tag>\n                        ))}\n                    </div>\n                </div>\n            </Modal>\n    )\n}","export interface Application {\n    id: string;\n    userId: string;\n    performName: string;\n    performDescription: string;\n    // true = accepted, false = rejected (for now!)\n    status: Status;\n}\n\nexport enum Status {\n    accepted,\n    rejected,\n    pending\n}","import {ADD_APPLICATION, AppActionTypes, CHANGE_APP_STATUS} from \"../../app.types\";\nimport {Application, Status} from \"./application.interface\";\n\nexport function addApplication(newApp: Application): AppActionTypes {\n    return {\n        type: ADD_APPLICATION,\n        payload: newApp,\n    }\n}\n\nexport function changeAppStatus(newStatus: Status, appId: string): AppActionTypes {\n    return {\n        type: CHANGE_APP_STATUS,\n        payload: [newStatus, appId]\n    }\n}","import {Form, Input, Modal, Select} from \"antd\";\nimport {useState} from \"react\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport {Application, Status} from \"../applicationsReducer/application.interface\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addApplication} from \"../applicationsReducer/application.actions\";\nimport {selectCurrUserId, selectUser} from \"../../users/usersReducer/user.selector\";\nimport {selectEvent} from \"../../events/eventsReducer/event.selector\";\nimport {useHistory} from \"react-router-dom\";\nimport {addApplicationToEvent} from \"../../events/eventsReducer/event.actions\";\n\nlet idGenerator = 0;\n\ninterface Props {\n    eventId: string;\n    closeModal: () => void;\n}\n\nexport function ApplyEventModal({eventId, closeModal} : Props) {\n    const [performName, setPerformName] = useState(\"\");\n    const [performDescription, setPerformDescription] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const currUserId = useSelector(selectCurrUserId);\n    const user = useSelector(selectUser(currUserId))\n    const event = useSelector(selectEvent(eventId));\n\n    const handleOnOk = () => {\n        const id = idGenerator++;\n        let newApplication: Application = {\n            id: id.toString(),\n            status: Status.pending,\n            userId: currUserId,\n            performName: performName,\n            performDescription: performDescription\n        }\n        dispatch(addApplication(newApplication));\n        dispatch(addApplicationToEvent(id.toString(), eventId));\n        closeModal()\n    }\n\n    const history = useHistory();\n    return (\n        <Modal visible={true} onCancel={closeModal} onOk={handleOnOk}>\n            <p className={`text-lg font-bold`}>Apply for {event.eventName}</p>\n            <div className={`py-5 space-y-1`}>\n                <p className={`m-0`}>Name: <b>{user.firstName} {user.lastName} </b></p>\n                <p  className={`m-0`}>Email Address: <b>{user.email}</b></p>\n            </div>\n            <Form layout=\"vertical\">\n                <Form.Item label=\"Performance Name\" name=\"performName\">\n                    <Input placeholder=\"Enter the name of your performance\"\n                           value={performName}\n                           onChange={(e) => setPerformName(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item label={\"Performance Description\"}>\n                    <TextArea placeholder=\"Enter performance description\"\n                              value={performDescription}\n                              onChange={(e) => setPerformDescription(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    {/*<Select>*/}\n                    {/*    */}\n                    {/*</Select>*/}\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}","import {NavBar} from \"../ui-components/navBar/NavBar\";\nimport {EventListingCard} from \"../features/events/eventListing/EventListingCard\";\nimport {useSelector} from \"react-redux\";\nimport {selectEvents} from \"../features/events/eventsReducer/event.selector\";\nimport {useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Empty} from \"antd\";\nimport Title from \"antd/es/typography/Title\";\nimport {EventListingModal} from \"../features/events/eventListing/EventListingModal\";\nimport {Event} from \"../features/events/eventsReducer/event.interface\";\nimport {CreateEventModal} from \"../features/events/createEventModal/CreateEventModal\";\nimport {ApplyEventModal} from \"../features/applications/applyEventModal/ApplyEventModal\";\nimport {selectCurrUserId} from \"../features/users/usersReducer/user.selector\";\n\n// interface MatchProps {\n//     match: any;\n// }\n\nexport function Events() {\n    const events = useSelector(selectEvents);\n    const user = useSelector(selectCurrUserId);\n    const [isEventModalVisible, setEventModalVisible] = useState(false);\n    const [isApplyEventModalVisible, setApplyEventModalVisible] = useState(false);\n    const [currEvent, setCurrEvent] = useState(\"\");\n    const history = useHistory();\n\n    const handleOnClickEvent = (key: string) => () => {\n        setEventModalVisible(true);\n        setCurrEvent(key)\n    }\n\n    const handleCloseEventModal = () => {\n        setEventModalVisible(false);\n    }\n\n    const handleCloseApplyModal = () => {\n        setApplyEventModalVisible(false);\n    }\n\n    const handleShowApplyModal = () => {\n        setApplyEventModalVisible(true);\n        setEventModalVisible(false);\n    }\n\n    const eventsCardList = (Object.keys(events).length === 0) ?\n        <Empty className={`py-20`} description={\"No events available yet!\"} /> :\n        Object.keys(events).map((key: string) => (\n                <EventListingCard\n                    onClick={handleOnClickEvent(key)}\n                    event={events[key]}\n                    showApplyModal={handleShowApplyModal}\n                />\n            ))\n\n    const eventModal = <EventListingModal eventId={currEvent}\n                                          closeModal={handleCloseEventModal}\n                                          showApplyModal={handleShowApplyModal}\n    />\n\n    const applyModal = <ApplyEventModal eventId={currEvent} closeModal={handleCloseApplyModal} />\n\n    return (\n        <>\n            {isApplyEventModalVisible ? applyModal : null}\n            {isEventModalVisible ? eventModal : null}\n            <NavBar/>\n            <div className={`max-w-3xl m-auto py-20 space-y-5`}>\n                <Title level={3}>Events</Title>\n                {eventsCardList}\n            </div>\n        </>\n    )\n}","import {Button, Divider, Form, Input} from \"antd\";\nimport {useState} from \"react\";\nimport Title from \"antd/es/typography/Title\";\nimport {User} from \"../features/users/usersReducer/user.interface\";\nimport {useDispatch} from \"react-redux\";\nimport {addUser, loginUser} from \"../features/users/usersReducer/user.actions\";\nimport {useHistory} from \"react-router-dom\";\n\nlet idGenerator = 0;\nexport function RegisterUser() {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const [requiredMark, setRequiredMarkType] = useState<boolean>();\n    const onRequiredTypeChange = (requiredMark: boolean) => {\n        setRequiredMarkType(requiredMark);\n    }\n\n    const appIds: string[] = [];\n    const eventIds: string[] = [];\n    const dispatch = useDispatch();\n\n    const handleOnOk = () => {\n        // idGenerator++;\n        // let id = idGenerator;\n        let newUser: User = {\n            firstName,\n            lastName,\n            email,\n            appIds,\n            eventIds,\n            password,\n            // id: id.toString(),\n            id: email,\n        }\n        dispatch(addUser(newUser));\n        dispatch(loginUser(email));\n        // console.log(\"id of new user is:\", id.toString());\n        history.push(`/events`)\n    }\n\n    const history = useHistory();\n\n    return (\n        <div className={`max-w-sm m-auto py-28`}>\n            <Title>Create an account</Title>\n            <p className={`pb-10`}>Please fill out the following information.</p>\n            <Form layout=\"vertical\"\n                  requiredMark={requiredMark}\n                  onValuesChange={onRequiredTypeChange}\n                  initialValues={{requiredMark}}\n            >\n                <Form.Item label=\"First Name\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter your first name\",\n                           }]}\n                           name=\"firstName\">\n                    <Input placeholder=\"Enter first name\"\n                           value={firstName}\n                           onChange={(e) => setFirstName(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Last Name\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter your last name\",\n                           }]}\n                           name=\"lastName\">\n                    <Input placeholder=\"Enter last name\"\n                           value={lastName}\n                           onChange={(e) => setLastName(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Email Address\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter your email address\",\n                           }]}\n                           name=\"email\">\n                    <Input placeholder=\"Enter email address\"\n                           value={email}\n                           onChange={(e) => setEmail(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Password\"\n                           rules={[{\n                               required: true,\n                               message: \"Please create a password\",\n                           }]}\n                           name=\"password\"\n                >\n                    <Input.Password placeholder=\"Create password\"\n                           value={password}\n                           onChange={(e) => setPassword(e.target.value)} />\n                </Form.Item>\n            </Form>\n            <div className={`pt-5 pb-20`}>\n                <Button size={\"large\"}\n                        type={\"primary\"}\n                        onClick={handleOnOk}\n                >\n                    Create Account</Button>\n            </div>\n            <Divider orientation={\"center\"}>Already have an account?</Divider>\n            <div className={`text-center`}>\n                <Button size={\"middle\"}\n                        type={\"link\"}\n                        onClick={() => history.push(`\\login`)}\n                >\n                    Sign in</Button>\n            </div>\n        </div>\n    )\n}","import {useSelector} from \"react-redux\";\nimport {Button, Tag} from \"antd\";\nimport {selectApplication} from \"../applicationsReducer/application.selector\";\nimport {selectCurrUserId, selectUser} from \"../../users/usersReducer/user.selector\";\nimport {Status} from \"../applicationsReducer/application.interface\";\n\ninterface Props {\n    appId: string;\n    onStatusChangeRequest: (newStatus: Status, appId: string) => void;\n}\n\nexport function ApplicantContent({appId, onStatusChangeRequest}: Props) {\n    const application = useSelector(selectApplication(appId));\n    const currUserId = useSelector(selectCurrUserId);\n    const user = useSelector(selectUser(currUserId));\n\n    function StatusTag() {\n        switch (application.status) {\n            case Status.pending:\n                return <Tag color=\"default\">Pending</Tag>\n            case Status.accepted:\n                return <Tag color=\"success\">Accepted</Tag>\n            case Status.rejected:\n                return <Tag color=\"error\">Rejected</Tag>\n        }\n    }\n\n    const handleStatusChangeRequest = (newStatus: Status) => () => {\n        onStatusChangeRequest(newStatus, appId);\n    }\n\n    return (\n        <div className={`border border-gray-200 rounded-md p-5`} onClick={() => (console.log())}>\n            <div className={`flex justify-between`}>\n                <div>\n                    <p>{user.firstName} {user.lastName}</p>\n                    <p>{user.email}</p>\n                    <p>{application.performName}</p>\n                    <p>{application.performDescription}</p>\n                </div>\n                <div className={`flex flex-col justify-between text-right`}>\n                    <div>\n                        <StatusTag />\n                    </div>\n                    <div className={`flex space-x-3`}>\n                        {application.status === Status.pending ? <>\n                            <Button onClick={handleStatusChangeRequest(Status.accepted)}>Accept</Button>\n                            <Button onClick={handleStatusChangeRequest(Status.rejected)}>Reject</Button>\n                        </> : null }\n\n                    </div>\n                    {/*{reviewSubmitted ? <Tag color=\"success\">Review Submitted</Tag> :*/}\n                    {/*    <Button onClick={() => {*/}\n                    {/*        setReviewModalVisible(true)*/}\n                    {/*        setReviewSubmitted(true)*/}\n                    {/*    }}>Submit Review</Button>*/}\n                    {/*}*/}\n                </div>\n            </div>\n        </div>\n    )\n}","import {RootState} from \"../../../store\";\nimport {selectEvent} from \"../../events/eventsReducer/event.selector\";\nimport {selectUser} from \"../../users/usersReducer/user.selector\";\n\nexport const selectApplicationState = (state: RootState) => state.applications;\nexport const selectApplications = (state: RootState) => selectApplicationState(state).applications;\nexport const selectApplication = (appId: string) => {\n    return (state: RootState) => selectApplications(state)[appId]\n}\n\n// return list of Application objects given eventId\n// export const selectEventApplications = (eventId: string) => {\n//     return (state: RootState) => selectEvent(eventId)(state).appIds.map(\n//         id => selectApplication(id)(state)\n//     )\n// }\n\n// return list of Application objects given userIds\n// export const selectUserApplications = (userId: string) => {\n//     return (state: RootState) => selectUser(userId)(state).appIds.map(\n//         id => selectApplication(id)(state)\n//     )\n// }","import {Button, Form, Input, Modal, Select, Tag} from \"antd\";\nimport {useState} from \"react\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport {Application, Status} from \"../applicationsReducer/application.interface\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addApplication, changeAppStatus} from \"../applicationsReducer/application.actions\";\nimport {selectUser} from \"../../users/usersReducer/user.selector\";\nimport {selectEvent} from \"../../events/eventsReducer/event.selector\";\nimport {useHistory} from \"react-router-dom\";\nimport {Event} from \"../../events/eventsReducer/event.interface\"\nimport {ApplicantConfirmation} from \"../applicantConfirmation/ApplicantConfirmation\";\nimport {CheckCircleOutlined} from '@ant-design/icons';\nimport {ReviewModal} from \"../reviewModal/ReviewModal\";\nimport {ApplicantContent} from \"../applicantContent/ApplicantContent\";\n\ninterface Props {\n    onCancel: () => void;\n    event: Event;\n}\n\nexport function ApplicantsModal({event, onCancel} : Props) {\n    const [statusChange, setStatusChange] = useState<boolean>(false);\n    const [confirmVisible, setConfirmVisible] = useState<boolean>(false);\n    const [currAppId, setCurrAppId] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const handleOnSubmitStatusChange = () => {\n        if (statusChange) {\n            dispatch(changeAppStatus(Status.accepted, currAppId))\n        } else {\n            dispatch(changeAppStatus(Status.rejected, currAppId))\n        }\n        setConfirmVisible(false);\n    }\n\n    const handleOnStatusChangeRequest = (newStatus: Status, appId: string) => {\n        if (newStatus === Status.accepted) {\n            setStatusChange(true);\n        } else {\n            setStatusChange(false);\n        }\n        setConfirmVisible(true);\n        setCurrAppId(appId);\n    }\n\n    const handleOnCancel = () => {\n        if (confirmVisible) {\n            setConfirmVisible(false);\n        } else {\n            onCancel();\n        }\n    }\n\n    const ApplicantConfirm = (\n        <Modal visible={true}\n               onCancel={() => setConfirmVisible(false)}\n               onOk={handleOnSubmitStatusChange}\n        >Are you sure you want to {statusChange ? \"accept\" : \"reject\"} this applicant?</Modal>\n    )\n\n    const appIds = event.appIds;\n\n    return (\n        <>\n            {confirmVisible ? ApplicantConfirm : null }\n            <Modal visible={true} onCancel={handleOnCancel} onOk={onCancel}>\n                <div className={`space-y-5`}>\n                    <p className={`text-lg font-bold`}>Applicants for {event.eventName}</p>\n                    {appIds.map((value) => (\n                        <ApplicantContent appId={value} onStatusChangeRequest={handleOnStatusChangeRequest}/>\n                    ))}\n                </div>\n            </Modal>\n        </>\n    )\n}","import {Button, Card, Tag} from \"antd\";\nimport {Event} from \"../eventsReducer/event.interface\"\nimport {Typography} from \"antd\";\nimport {useState} from \"react\";\nimport {ApplyEventModal} from \"../../applications/applyEventModal/ApplyEventModal\";\nimport {ApplicantsModal} from \"../../applications/applicantsModal/ApplicantsModal\";\n\nconst {Title} = Typography;\n\ninterface Props {\n    onClick: () => void;\n    event: Event\n}\n\nexport function ListingCard({onClick, event}: Props) {\n    const {id, eventName, musicGenre, audienceSize, startDate, endDate, accessibility} = event;\n    const [ApplicantsModalVisibility, setApplicantsModalVisibility] = useState<boolean>(false);\n\n    const applicantsModal = <ApplicantsModal onCancel={() => setApplicantsModalVisibility(false)}\n                                        event={event} />\n\n    if (musicGenre) {\n        console.log(musicGenre.map((x) => x))\n    }\n\n    let accessSettings: string[] = [];\n    if (accessibility) {\n        accessSettings = accessibility.map((x) => x);\n    }\n\n    return (\n        <>\n            {ApplicantsModalVisibility ? applicantsModal : null}\n            <div className={`hover:shadow-lg border border-gray-200 rounded-md p-5`} onClick={() => (console.log())}>\n                <div className={`flex justify-between`}>\n                    <div className={`space-y-4`}>\n                        <div className={`space-y-1`}>\n                            {/*<p className={`text-gray-600 font-bold m-0 pb-5`}>PAST EVENT</p>*/}\n                            <p className={`text-gray-600 m-0`}>{startDate.format('MMMM D, yyyy') + \" at \" + startDate.format('h:mm A')}</p>\n                            {/*<p>{endDate.format('MM/DD/YYYY HH:mm')}</p>*/}\n                            <p className={`text-lg font-bold`}>{eventName}</p>\n                        </div>\n                        <div className={`space-y-2`}>\n                            <p className={`text-gray-700 m-0`}>Genre(s): {musicGenre ? musicGenre.map((x) => <Tag>{x}</Tag>) : null}</p>\n                            <p className={`text-gray-700`}>Audience Size: {audienceSize}</p>\n                            {Object.values(accessSettings).map((x) => (\n                                <Tag color=\"purple\">{x}</Tag>\n                            ))}\n                        </div>\n                    </div>\n                    <div>\n                        <Button type=\"link\" onClick={() => setApplicantsModalVisibility(true)}>View Applicants</Button>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","import {NavBar} from \"../ui-components/navBar/NavBar\";\nimport {useSelector} from \"react-redux\";\nimport {selectEvents, selectEventsByUser} from \"../features/events/eventsReducer/event.selector\";\nimport {useHistory} from \"react-router-dom\";\nimport {Empty} from \"antd\";\nimport Title from \"antd/es/typography/Title\";\nimport {ListingCard} from \"../features/events/listingCard/ListingCard\";\nimport {selectCurrUserId} from \"../features/users/usersReducer/user.selector\";\n\nexport function Listings() {\n    const currUserId = useSelector(selectCurrUserId)\n    const events = useSelector(selectEventsByUser(currUserId));\n    console.log(\"events:\", events);\n    const history = useHistory();\n\n    const eventsCardList = (events.length === 0) ?\n        <Empty className={`py-20`} description={\"No events available yet!\"} /> :\n        (events).map((event) => (\n            <ListingCard\n                onClick={() => history.push(`/event/${event}`)}\n                event={event}/>\n        ))\n\n    return (\n        <>\n            <NavBar/>\n            <div className={`max-w-3xl m-auto py-20 space-y-5`}>\n                <Title level={3}>My Listings</Title>\n                {eventsCardList}\n            </div>\n        </>\n    )\n}","import Title from \"antd/es/typography/Title\";\nimport {Button, Divider, Form, Input} from \"antd\";\nimport {useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\nimport {loginUser} from \"../features/users/usersReducer/user.actions\";\n\nexport function SignIn() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const [requiredMark, setRequiredMarkType] = useState<boolean>();\n    const onRequiredTypeChange = (requiredMark: boolean) => {\n        setRequiredMarkType(requiredMark);\n    }\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const handleOnSignIn = () => {\n        dispatch(loginUser(email));\n        history.push(`/events`);\n    }\n\n    const handleOnRegister = () => {\n        history.push(`register`);\n    }\n\n    return (\n        <div className={`max-w-sm m-auto py-28`}>\n            <Title>Sign in</Title>\n            <p className={`pb-10`}>Welcome back! Sign in with your email address to continue.</p>\n            <Form layout=\"vertical\"\n                  requiredMark={requiredMark}\n                  onValuesChange={onRequiredTypeChange}\n                  initialValues={{requiredMark}}\n            >\n                <Form.Item label=\"Email Address\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter your email\",\n                           }]}\n                           name=\"email\">\n                    <Input placeholder=\"Email address\"\n                           value={email}\n                           onChange={(e) => setEmail(e.target.value)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Password\"\n                           rules={[{\n                               required: true,\n                               message: \"Please enter your password\",\n                           }]}\n                           name=\"password\">\n                    <Input.Password placeholder=\"Password\"\n                           value={password}\n                           onChange={(e) => setPassword(e.target.value)} />\n                </Form.Item>\n            </Form>\n            <div className={`pt-5 pb-20`}>\n                <Button size={\"large\"}\n                        type={\"primary\"}\n                        onClick={handleOnSignIn}\n                >\n                    Sign in</Button>\n            </div>\n            <Divider orientation={\"center\"}>Don't have an account yet?</Divider>\n            <div className={`text-center`}>\n                {/*<Title level={5}>Don't have an account yet?</Title>*/}\n                <Button size={\"middle\"}\n                        type={\"link\"}\n                        onClick={handleOnRegister}\n                >\n                    Register here!</Button>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport {Events} from \"./pages/Events\";\nimport {EventListingModal} from \"./features/events/eventListing/EventListingModal\";\nimport {RegisterUser} from \"./pages/RegisterUser\";\nimport {ApplyEventModal} from \"./features/applications/applyEventModal/ApplyEventModal\";\nimport {Listings} from \"./pages/Listings\";\nimport {SignIn} from \"./pages/SignIn\";\n\nfunction App() {\n  return (\n      <>\n          <Router>\n              <Switch>\n                  <Route exact path=\"/events\" component={Events} />\n                  {/*<Route exact path=\"/:userId\" component={ApplyEventModal} />*/}\n                  <Route exact path=\"/listings\" component={Listings} />\n                  <Route exact path=\"/register\" component={RegisterUser} />\n                  <Route exact path=\"/event/:eventId\" component={EventListingModal} />\n                  <Route exact path=\"/login\" component={SignIn}/>\n                  <Redirect to=\"/login\" />\n              </Switch>\n          </Router>\n      </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {EventsState} from \"./event.types\";\nimport {ADD_APP_TO_EVENT, ADD_EVENT, AppActionTypes} from \"../../app.types\";\n\nconst initialState: EventsState = {\n    events: {},\n};\n\nexport function eventsReducer(\n    state = initialState,\n    action: AppActionTypes\n): EventsState {\n    switch (action.type) {\n        case ADD_EVENT:\n            const event = action.payload;\n            return {\n                events: {\n                    ...state.events,\n                    [event.id]: event,\n                }\n            }\n        case ADD_APP_TO_EVENT:\n            const newAppId = action.payload[0];\n            const eventId = action.payload[1];\n            const newEvent = state.events[eventId];\n            const updatedAppIds = [...newEvent.appIds, newAppId];\n            newEvent.appIds = updatedAppIds;\n            return {\n                events: {\n                    ...state.events,\n                    [eventId]: newEvent,\n                }\n            }\n        default:\n            return state;\n    }\n}","import {UsersState} from \"./user.types\";\nimport {AppActionTypes} from \"../../app.types\";\n\nconst initialState: UsersState = {\n    users: {},\n    user: \"\",\n    isLoggedIn: false,\n}\n\nexport function usersReducer(\n    state = initialState,\n    action: AppActionTypes\n) {\n    switch (action.type) {\n        case \"ADD_USER\":\n            const user = action.payload;\n            return {\n                users: {\n                    ...state.users,\n                    [user.id] : user,\n                },\n                user: state.user,\n                isLoggedIn: state.isLoggedIn,\n            }\n        case \"LOGIN_USER\":\n            const currUser = action.payload;\n            return {\n                users: {...state.users},\n                user: currUser,\n                isLoggedIn: true,\n            }\n        case \"LOGOUT_USER\":\n            return {\n                users: state.users,\n                user: \"\",\n                isLoggedIn: false,\n            }\n        case \"ADD_EVENT_TO_USER\":\n            const eventId = action.payload;\n            // let updatedEvents: string[] = [];\n            // if (state.users[state.user].eventIds.length === 0) {\n            //     updatedEvents = [eventId];\n            // } else {\n            //     updatedEvents = [...state.users[state.user].eventIds, eventId];\n            // }\n            const updatedEvents = [...state.users[state.user].eventIds, eventId];\n            const updatedUser = {...state.users[state.user], eventIds: updatedEvents}\n            return {\n                users: {\n                    ...state.users,\n                    [state.user]: updatedUser\n                },\n                user: state.user,\n                isLoggedIn: state.isLoggedIn,\n            }\n        default:\n            return state;\n    }\n}","import {AppActionTypes} from \"../../app.types\";\nimport {ApplicationsState} from \"./application.types\";\n\nconst initialState: ApplicationsState = {\n    applications: {}\n}\nexport function applicationsReducer(\n    state = initialState,\n    action: AppActionTypes\n) {\n    switch (action.type) {\n        case \"ADD_APPLICATION\":\n            const newApp = action.payload;\n            return {\n                applications: {\n                    ...state.applications,\n                    [newApp.id]: newApp,\n                }\n            }\n        case \"CHANGE_APP_STATUS\":\n            const newStatus = action.payload[0];\n            const appId = action.payload[1];\n            const updatedApp = state.applications[appId];\n            updatedApp.status = newStatus;\n            return {\n                applications: {\n                    ...state.applications,\n                    [appId]: updatedApp,\n                }\n            }\n        default:\n            return state;\n    }\n}","import {combineReducers, createStore} from \"redux\";\nimport {eventsReducer} from \"./features/events/eventsReducer/event.reducer\";\nimport {usersReducer} from \"./features/users/usersReducer/user.reducer\";\nimport {applicationsReducer} from \"./features/applications/applicationsReducer/application.reducer\";\n\nexport const rootReducer = combineReducers({\n    events: eventsReducer,\n    users: usersReducer,\n    applications: applicationsReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(\n    rootReducer,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}